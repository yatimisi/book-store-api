from django.http import JsonResponse, HttpResponseNotAllowed, QueryDict
from django.forms import model_to_dict
from django.shortcuts import get_object_or_404
from django.views.decorators.csrf import csrf_exempt

from .models import Book
from .forms import BookForm


def parse_request(request):
    if not request.body:
        request.data = {}
        return

    request.data = json.loads(request.body.decode('utf-8'))


@csrf_exempt
def index(request):
    parse_request(request)
    if request.method == 'GET':
        return list_all(request)

    if request.method == 'POST':
        return new(request)

    return HttpResponseNotAllowed(['GET', 'POST'])


@csrf_exempt
def detail(request, pk):
    parse_request(request)
    if request.method == 'GET':
        return show(request, pk)

    if request.method == 'PUT' or request.method == 'PATCH':
        return edit(request, pk)

    if request.method == 'DELETE':
        return delete(request, pk)

    return HttpResponseNotAllowed(['GET', 'PUT', 'PATCH', 'DELETE'])


def list_all(request):
    books = Book.objects.all()
    return JsonResponse([model_to_dict(b) for b in books], safe=False)


def show(request, pk):
    book = get_object_or_404(Book, pk=pk)
    return JsonResponse(model_to_dict(book))


def new(request):
    form = BookForm(request.data)
    if form.is_valid():
        book = form.save()
        return JsonResponse(model_to_dict(book))

    return JsonResponse(form.errors.get_json_data(), status=400)


def edit(request, pk):
    book = get_object_or_404(Book, pk=pk)
    form = BookForm(request.data, isinstance=book)
    if form.is_valid():
        book = form.save()
        return JsonResponse(model_to_dict(book))

    return JsonResponse(form.errors.get_json_data(), status=400)


def delete(request, pk):
    book = get_object_or_404(Book, pk=pk)
    book.delete()
    return JsonResponse({})